#!/usr/bin/env bash

work_duration=1200  # 20 minutes in seconds
short_break_duration=300  # 5 minutes in seconds
long_break_duration=900  # 15 minutes in seconds
work_phase=true
cycle_count=3


# Function to display the remaining time for work or rest phase in minutes and seconds format
display_remaining_time() {
    local duration=$1
    local phase=$2
    local color=""
    local color_tmux=""
    local cycle_count_current=$3

    for ((time_left=duration; time_left>=0; time_left--)); do
        local minutes=$((time_left / 60))
        local seconds=$((time_left % 60))

        if [ "$time_left" -eq 0 ]; then
            echo -e "\nSwitching to $(if [ "$phase" == "Work" ]; then echo "Short Break"; else echo "Work"; fi) phase...\n"
            break

        fi

        if [ $time_left -le 60 ]; then
            color="\e[38;2;235;111;146m"
            color_tmux="#[fg=#eb6f92]"
        elif [ $time_left -le 300 ]; then
            color="\e[38;2;246;193;119m"
            color_tmux="#[fg=#f6c177]"
        fi

        # Ajoute un 0 s'il n'y a pas de dizaine pour l'affichage
        formatted_time="$(printf "%02d:%02d" "$minutes" "$seconds")"
        update_tmux_status "[$phase] - [$cycle_count_current/$cycle_count] ${color_tmux}$formatted_time#[fg="#31748f"]"
        echo -ne "Remaining time: ${color}$minutes minutes and $seconds seconds \e[0m- Phase: $phase\033[0K\r"
        sleep 1

    done
}

# Helper function to update the time display
update_time_display() {
  local minutes=$1
  local seconds=$2
  local phase=$3
  local color=$4
  local color_tmux=$5
  echo -ne "Remaining time: ${color}$minutes minutes and $seconds seconds \e[0m- Phase: $phase\033[0K\r"
}

# Function to update Tmux status line with phase and time remaining (including seconds)
update_tmux_status() {
    local status_content="$1"
    tmux set-option -g status-right "$status_content %A %d/%m %H:%M "
}

# Function to clear tmux status line
clear_tmux_status() {
    if tmux has-session -t "Pomodoro" 2>/dev/null; then
        tmux set-option -g status-right "%A %d/%m %H:%M "
    fi
}

# Trap Ctrl+C (SIGINT) signal to clear tmux status line before exiting
trap 'clear_tmux_status; exit' INT

# Function to validate if a value is a positive integer
validate_positive_integer() {
  if ! [[ $1 =~ ^[0-9]+$ ]]; then
    echo "Error: $2 must be a positive integer." >&2
    exit 1
  fi
}

validate_settings() {
    validate_positive_integer $work_duration "Work duration"
    validate_positive_integer $short_break_duration "Short break duration"
    validate_positive_integer $long_break_duration "Long break duration"
    validate_positive_integer $cycle_count "Cycle count"
}

notification_pomodoro() {
    if [ "$work_phase" = true ]; then
        notify-send "Petite pause"
    else
        notify-send "On repart au taff"
    fi
}

# Function to handle work and rest periods
pomodoro_cycle() {
    trap 'clear_tmux_status; exit' INT
    for ((i=1; i<=cycle_count;)); do
        if [ "$work_phase" = true ]; then
            echo "Starting work period $i..."
            update_tmux_status
            display_remaining_time $work_duration "Work" $i
            notification_pomodoro
            work_phase=false
        else

            echo "Starting short break period $i..."
            update_tmux_status
            display_remaining_time $short_break_duration "Short Break" $i
            notification_pomodoro
            work_phase=true
            ((i++))
        fi
    done
    echo "Pomodoro cycle finished!"
}


# Function to display help information
display_help() {
    echo "Usage: pomodoro.sh [-w <work_time>] [-s <short_break_time>] [-l <long_break_time>] [-c <cycle_count>] [-h]"
    echo "Options:"
    echo "  -w <work_time>: Set the duration of work time in minutes (default is 20)"
    echo "  -s <short_break_time>: Set the duration of short break time in minutes (default is 5)"
    echo "  -l <long_break_time>: Set the duration of long break time in minutes (default is 15)"
    echo "  -c <cycle_count>: Set the number of cycles to complete (default is 4)"
    echo "  -h: Display this help message"
    echo ""
    echo "Example:"
    echo "  ./pomodoro.sh -w 25 -s 10 -l 20 -c 6"
    echo "  This will set the work time to 25 minutes, short break time to 10 minutes, long break time to 20 minutes, and complete 6 cycles."
}

# Parse command-line options
while getopts "w:s:l:c:h" opt; do
    case $opt in
        w) work_duration=$((OPTARG * 60));;
        s) short_break_duration=$((OPTARG * 60));;
        l) long_break_duration=$((OPTARG * 60));;
        c) cycle_count=$OPTARG;;
        h) display_help; exit 0;;
        \?) echo "Invalid option: -$OPTARG" >&2; exit 1;;
    esac
done

# Check for missing options
if [ -z "$work_duration" ] || [ -z "$short_break_duration" ] || [ -z "$long_break_duration" ] || [ -z "$cycle_count" ]; then
  echo "Error: Missing required options. Use -h for help." >&2
  exit 1
fi

# Function to display a recap of time settings
display_total_time_recap() {
    total_work_time=$((work_duration * cycle_count))
    total_short_break_time=$((short_break_duration * cycle_count))
    total_long_break_time=$((long_break_duration * (cycle_count - 1)))
    total_time=$((total_work_time + total_short_break_time + total_long_break_time))

    echo -e "\n"
    echo "Recap of Time Settings:"
    echo "Total Work Time: $((total_work_time / 60)) minutes"
    echo "Total Short Break Time: $((total_short_break_time / 60)) minutes"
    echo "Total Long Break Time: $((total_long_break_time / 60)) minutes"
    echo "Total Pomodoro Cycle Time: $((total_time / 60)) minutes"
    echo -e "\n"
}

display_time_recap() {
    echo -e "\n"
    echo "Recap of Current Time Settings:"
    echo "Work Time: $((work_duration / 60)) minutes"
    echo "Short Break Time: $((short_break_duration / 60)) minutes"
    echo "Long Break Time: $((long_break_duration / 60)) minutes"
    echo -e "\n"
}


main(){
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -w|--work-duration)
                work_duration=$2
                shift
                ;;
            -s|--short-break)
                short_break_duration=$2
                shift
                ;;
            -l|--long-break)
                long_break_duration=$2
                shift
                ;;
            -c|--cycle-count)
                cycle_count=$2
                shift
                ;;
            -h|--help)

                display_help
                exit 0
                ;;
            *)
                echo "Invalid option: $1"
                display_help
                exit 1
                ;;
        esac
        shift
    done

    validate_settings
    display_time_recap
    pomodoro_cycle
}

main

