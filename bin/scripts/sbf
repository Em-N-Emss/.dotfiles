#!/usr/bin/env bash

# sbf: Second Brain Formatter - Appends tags as wikilinks

# ===========================================
# Helper Functions
# ===========================================

# Simple logging function for info messages
log_info() {
    echo "[INFO] sbf: $1"
}

# Simple logging function for error messages and exit
log_error() {
    echo "[ERROR] sbf: $1" >&2
    exit 1
}

# ===========================================
# Main Script Logic
# ===========================================

main() {
    # Validate arguments
    if [[ $# -eq 0 ]]; then
        log_error "Usage: $0 <file_path>"
    fi

    local file="$1"

    # Validate the file: exists, is readable, and is writable (for appending and correcting)
    if [[ ! -f "$file" ]]; then
        log_error "File not found: '$file'"
    fi
    if [[ ! -r "$file" ]]; then
         log_error "File not readable: '$file'"
    fi
     if [[ ! -w "$file" ]]; then
          log_error "File not writable: '$file'"
    fi

    # Use the validated absolute path for operations

    # realpath resolves symbolic links and gives the absolute path
    local target_file=$(realpath "$file")

    log_info "Processing file: '$target_file'"

    # ===========================================
    # Typo Correction: 'tags:' to 'Tags:'
    # ===========================================
    log_info "Checking for and correcting 'tags:' typo..."

    # Use grep -q to check if the typo exists at the start of a line
    # We'll use sed -i to perform the in-place replacement globally.
    # This assumes 'tags:' will only appear as the YAML tag marker.
    if grep -q '^tags[[:space:]]*:' "$target_file"; then
        log_info "Found 'tags:' typo. Attempting to correct to 'Tags:'."
        # Use sed -i to perform the in-place replacement
        # s/.../.../ - substitution command
        # ^tags[[:space:]]*: - regex pattern to match 'tags' at the start of the line,
        #                     followed by zero or more spaces and a colon.

        # Tags:             - replacement string
        # The sed command replaces lines starting with 'tags:' (case-sensitive)
        # with 'Tags:'. It does this directly in the file (-i).
        sed -i 's/^tags[[:space:]]*:/Tags:/' "$target_file"


        # Check if sed was successful (optional but good practice)
        if [ $? -eq 0 ]; then
            log_info "'tags:' typo corrected successfully to 'Tags:'."
        else
            log_error "Failed to correct 'tags:' typo using sed. Please check file permissions or content."
            # Decide if you want to exit here or continue processing
            # If you continue, the script will likely miss tags under 'tags:'
            # For safety, exiting on failure to correct seems reasonable.
            exit 1
        fi
    else
        log_info "No 'tags:' typo found. File seems correctly formatted for the tag marker."
    fi

    # ===========================================
    # Tag Extraction and Appending

    # ===========================================
    log_info "Extracting tags for appending wikilinks."
    local tags_to_append


    # Awk command to extract tags:
    # 1. Handles YAML front matter tags (- TagName)
    # 2. Handles inline #hashtags anywhere outside YAML
    # 3. Pipe to sort -u to get unique tag names
    # NOTE: The correction step above ensures that the YAML tag marker is 'Tags:'.
    # The awk script below already correctly looks for /^Tags[[:space:]]*:/
    tags_to_append=$(awk '
        BEGIN {
            in_yaml = 0
            in_yaml_tags = 0
        }
        # Detect YAML front matter start/end
        /^---$/ {
            if (in_yaml) {
                in_yaml = 0
                in_yaml_tags = 0 # Reset YAML tag flag on exit
            } else {
                in_yaml = 1
            }
            next # Skip the --- line itself
        }
        # Detect "Tags:" line within YAML (This now reliably finds 'Tags:' due to the correction step)
        in_yaml && /^Tags[[:space:]]*:/ {
            in_yaml_tags = 1

            next # Skip the Tags: line
        }
        # Process indented hyphen YAML tags while inside YAML tags section

        in_yaml && in_yaml_tags && /[[:space:]]*-[[:space:]]/ {
            tag = $0
            # Remove leading spaces, hyphen, and any trailing spaces
            gsub(/^[[:space:]]*-[[:space:]]*|[[:space:]]*$/, "", tag)
            if (tag != "") {
                print tag # Print the cleaned tag name
            }
            next # Process next line

        }
        # Handle inline #hashtags outside YAML front matter
        !in_yaml && /#[A-Za-z0-9_-]+/ {
            # Split the line into words and check each word
            split($0, line_tags, " ")
            for (t in line_tags) {
                tag = line_tags[t]
                if (tag ~ /^#/) {
                    # Remove the leading # and print the tag name

                    gsub(/^#/, "", tag)
                    print tag
                }
            }
        }
    ' "$target_file" | sort -u) # Feed file content to awk and pipe output to sort -u

    # Check if any tags were found
    if [[ -n "$tags_to_append" ]]; then
        log_info "Found unique tags to append as wikilinks."

        # Loop through each unique tag found and append it as a wikilink on a new line
        # The `while read` loop processes each line (each unique tag) from the `tags_to_append` variable
        # IFS= read -r prevents issues with spaces or backslashes in tag names
        while IFS= read -r tag; do
            # Append an empty line then the wikilink on a new line for separation
            echo "" >> "$target_file"
            echo "[[$tag]]" >> "$target_file"

            log_info "Appended wikilink: [[$tag]]"
        done <<< "$tags_to_append" # Use a here-string to feed the list of tags into the loop
    else
        log_info "No tags found to append as wikilinks."
    fi

    log_info "Processing complete for '$target_file'."
}

# Run the main function with all script arguments
main "$@"
